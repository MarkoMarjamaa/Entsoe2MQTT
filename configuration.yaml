mqtt:
  broker: homeautomation
  port: 1883
  discovery: true

  sensor:
# MQTT Electricity Price Entso-e
  - name: "Electricity Price"
    state_topic: "Entsoe2MQTT/sensor/ElectricityPrice"
    value_template: "{{ value_json.state }}"
    json_attributes_topic: "Entsoe2MQTT/sensor/ElectricityPrice"
    json_attributes_template: "{{ value_json | tojson }}"

template:
  - trigger:
    - platform: time_pattern
      minutes: "0"
      seconds: "0"
    - platform: state
      entity_id: sensor.electricity_price
    sensor:
      - name: "Electricity Price Current"
        unique_id: electricity_price_current
        icon: mdi:cash
        unit_of_measurement: 'EUR/kWh'
        state: >
          {% set current_time = now() %}
          {% set raw_today = state_attr('sensor.electricity_price', 'raw_today') %}
          {% for entry in raw_today %}
            {% if current_time >= strptime(entry.start, '%Y-%m-%dT%H:%M:%S%z') and current_time < strptime(entry.end, '%Y-%m-%dT%H:%M:%S%z') %}
              {{ entry.value / 100.0| float }}
            {% endif %}
          {% endfor %}

  - sensor:
      - name: "Electricity Price Average"
        unique_id: electricity_price_average
        icon: mdi:cash
        unit_of_measurement: 'EUR/kWh'
        state: >
          {% set raw_today = state_attr('sensor.electricity_price', 'raw_today') %}
          {% set values = raw_today | map(attribute='value') | list %}
          {{ (values | sum / values | length if values | length > 0 else 0 ) / 100.0| float }}

      - name: "Electricity Price Min"
        unique_id: electricity_price_min
        icon: mdi:cash
        unit_of_measurement: 'EUR/kWh'
        state: >
          {% set raw_today = state_attr('sensor.electricity_price', 'raw_today') %}
          {% set values = raw_today | map(attribute='value') | list %}
          {{ ( values | min if values | length > 0 else 0 ) / 100.0| float }}

      - name: "Electricity Price Max"
        unique_id: electricity_price_max
        icon: mdi:cash
        unit_of_measurement: 'EUR/kWh'
        state: >
          {% set raw_today = state_attr('sensor.electricity_price', 'raw_today') %}
          {% set values = raw_today | map(attribute='value') | list %}
          {{ (values | max if values | length > 0 else 0) / 100.0| float }}

      - name: "Cheapest 2 hours energy tomorrow"
        unique_id: cheapest_2_hours_energy_tomorrow
        device_class: timestamp
        state: >
         {% set search_start_hour = 0 %}
          {% set search_end_hour = 18 %}
          {% set window_size = 2 %}
          {% set raw_tomorrow = state_attr('sensor.electricity_price', 'raw_tomorrow') %}
          {%- set ns = namespace(min_sum = None, best_start = None) -%}
          {% if raw_tomorrow is none or raw_tomorrow | length < window_size %}
            none
          {% else %}
            {% set filtered = raw_tomorrow | selectattr('start', '>=', (now()+ timedelta( hours = (24))).replace(hour=search_start_hour, minute=0, second=0, microsecond=0).isoformat()) | selectattr('end', '<=', (now()+ timedelta( hours = (24))).replace(hour=search_end_hour, minute=59, second=59, microsecond=0).isoformat()) | list %}
            {% for i in range(filtered | length - window_size + 1) %}
              {% set sum_value = filtered[i:i+window_size] | map(attribute='value') | sum %}
              {% if ns.min_sum is none or sum_value < ns.min_sum %}
                 {% set ns.min_sum = sum_value %}
                 {% set ns.best_start = i %}
              {% endif %}
            {% endfor %}
            {% if ns.best_start is none %}
              none
            {% else %}
              {% set best_hours = filtered[ns.best_start:ns.best_start+window_size] %}
              {{ best_hours[0].start }}
            {% endif %}
          {% endif %}

input_boolean:
  warm_water_heater_manual:
    name: Warm Water Heater Manual
  warm_water_heater_logical:
    name: Warm Water Heater Logical

input_datetime:
  warm_water_heater_on_time:
    name: "Warm Water Heater On Time"
    has_time: true
    has_date: false
  warm_water_heater_off_time:
    name: "Warm Water Heater Off Time"
    has_time: true
    has_date: false
